{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["notesWithRelativeMinors","majorKeyCircle","Object","keys","minorKeyCircle","values","noteQuality","inversions","piano","concat","map","note","getThird","root","quality","semiTones","notePositionDifference","length","indexOf","getFith","keyCircle","indexOfRoot","calcChordNotes","chordObj","inversion","fifth","third","generateChord","chordList","randomRoot","Math","floor","random","chord","notes","App","useState","setChord","majorChords","reduce","acc","majorNote","minorChords","minorNote","createChordList","chordlist","setInversion","showChordKeys","setShowChordKeys","onClick","a","newInversion","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aba0e7aa.chunk.js","sourcesContent":["import { useState } from 'react'\nimport './App.css';\nconst notesWithRelativeMinors = {\n  'C': 'A',\n  'G': 'E',\n  'D': 'B',\n  'A': 'F♯',\n  'E': 'C♯',\n  'B': 'G♯',\n  'G♭': 'E♭',\n  'D♭': 'B♭',\n  'A♭': 'F',\n  'E♭': 'C',\n  'B♭': 'G',\n  'F': 'D',\n}\nconst majorKeyCircle = Object.keys(notesWithRelativeMinors)\nconst minorKeyCircle = Object.values(notesWithRelativeMinors)\n\nconst noteQuality = ['♭', '♯']\nconst chordType = ['m', 'maj']\nconst extensions = ['7', '9']\nconst inversions = ['root position', '1st inversion', '2nd inversion']\nconst notes = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\nconst piano = \n  [].concat(...notes.map((note) => {\n    if (note === 'B' || note === 'E') {\n      return [`${note}${noteQuality[0]}`,`${note}`]\n    }\n    return [`${note}${noteQuality[0]}`,`${note}` , `${note}${noteQuality[1]}`]\n  }))\n\nconst getThird = (root, quality, piano) => {\n  const semiTones = quality === 'maj' ? 6 : 5\n    const pianoLength = piano.length -1\n    const notePositionDifference = pianoLength - piano.indexOf(root)\n   \n    if (notePositionDifference < semiTones) {\n      return piano[semiTones-notePositionDifference - 1]\n    }\n  return piano[piano.indexOf(root) + semiTones]\n}\nconst getFith = (root, keyCircle) => {\n  const indexOfRoot = keyCircle.indexOf(root)\n  if (indexOfRoot !== keyCircle.length - 1) {\n    return keyCircle[indexOfRoot + 1]\n  }\n  return keyCircle[0]\n}\nconst createChordList = () => {\n  const majorChords = majorKeyCircle.reduce((acc, majorNote) => {\n    return {...acc, [majorNote]: {\n      quality: 'maj',\n      fifth: getFith(majorNote, majorKeyCircle),\n      third: getThird(majorNote, 'maj', piano)\n    }}\n  }, {})\n  const minorChords = minorKeyCircle.reduce((acc, minorNote) => {\n    return {...acc, [minorNote]: {\n      quality: 'm',\n      fifth: getFith(minorNote, minorKeyCircle),\n      third: getThird(minorNote, 'm', piano)\n    }}\n  }, {})\n  return  {...minorChords, ...majorChords}\n}\n\nconst calcChordNotes = (root, chordObj, inversion) => {\n  const { fifth, third } = chordObj\n  if (inversion === 0) {\n    return `${root} ${third} ${fifth}`\n  }\n  if(inversion === 1) {\n    return `${third} ${fifth} ${root}`\n  }\n  if(inversion === 2) {\n    return `${fifth} ${root} ${third}`\n  }\n}\nconst generateChord = (chordList, inversion) => {\n  const keys = Object.keys(chordList)\n  const randomRoot = keys[Math.floor(Math.random() * keys.length)]\n  return {\n    chord: `${randomRoot}${chordList[randomRoot].quality}`,\n    notes: calcChordNotes(randomRoot, chordList[randomRoot], inversion)\n  }\n}\n\n\nfunction App() {\n  const [chord, setChord] = useState({chord: 'Cmaj', notes: 'C E G'})\n  const [chordlist, setChordList] = useState(createChordList())\n  const [inversion, setInversion] = useState(0)\n  const [showChordKeys, setShowChordKeys] = useState(false)\n\n  const onClick = async () => {\n    \n    const newInversion = Math.floor(Math.random()* inversions.length)\n    await setInversion(newInversion)\n    setChord(generateChord(chordlist, newInversion))\n    setShowChordKeys(false)\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"navbar\">\n        <h1>Chord generator</h1>\n      </div>\n      <div className=\"container\">\n        <h2 className=\"chord\">{chord.chord}</h2>\n        <p className=\"inversion\">{inversions[inversion]}</p>\n        <button className=\"generate\" onClick={() => onClick()}>New chord</button>\n        {!showChordKeys ? <button className='generate' onClick={() => {setShowChordKeys(true)}}>Show answer</button>\n        :<p>notes: {chord.notes}</p>\n  }</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}